# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do

# ------------------------------------------------------------------------------------------------ #

    # This lane is used to build the project afresh. It is going to clean the project and execute the 
    # gradle build command
    desc "This lane is used to build the project afresh. It is going to clean the project and execute the gradle build command"
    lane :build do
        gradle(task: "clean")
        gradle(task: "build")
    end

# ------------------------------------------------------------------------------------------------ #

    # Used to execute all Junit test cases added to the project.
    desc "Runs all the tests"
    lane :test do
        gradle(task: "test")
    end

# ------------------------------------------------------------------------------------------------ #

    # Increases the version number of the Android project. It accepts build_number is a parameter. An integer
    # value and writes it to a versionCode file in the project. This file is then used by the gradle file
    # to increase the versionCode and versionName of the project.
    desc "Increment build number"
    lane :increment do | options |
        # Get the last version code from the build number and increment it.
        # versionCode = File.read("../versionCode").split('=')[1].to_i
        versionCode = options[:build_number]

        versionCodeFile = File.new("../versionCode", "w")
        versionInfo = "VERSION_CODE=#{versionCode}"
        versionCodeFile.write(versionInfo)
        versionCodeFile.close
    end

# ------------------------------------------------------------------------------------------------ #

    # Deploys the application to a store based on keywords found in commit message. If commit message include:
    #   * beta : Crashlytics
    desc "Deploy a build for testing on Beta by crashlytics if BETA keyword is detected. Otherwise, release to Google play store"
    lane :release do | options |
        # Print the parameter passed for good measure
        print "Release lane received following parameters : "
        print options

        if !options[:commit_message].nil?
            if options[:commit_message].include? 'beta'

                # Generate the debugRelease APK
                gradle(task: "assembleDebug")

                hockey(
                    api_token: "5d9e004630fc4bfd965be6f46b63a12e",
                    status: "2", #Download status: "1" = No user can download; "2" = Available for download (only possible with full-access token)  
                    release_type: "2", #Release type of the app: "0" = Beta (default), "1" = Store, "2" = Alpha, "3" = Enterprise
                    apk: "./app/build/outputs/apk/debug/app-debug.apk"
                )
            end
        end
    end
end